const { VK } = require('vk-io');
const { google } = require('googleapis');

const vk = new VK({
    token: 'vk1.a.S-i7zCoVgyHjB1D8KmyJ7rxx_kX0UNyRHSwXWbUXEVCah6C61qz2U2YB--k__L2ZF5i62GH439DajMvmDf6YidJLN-MeOZ6pgfDvmaS9SLtOi3u2fxx2EhfuyQCAUycYbFzaqtS39oImZB1vqJsBq30zcJwi4-gF1lFoiC0pVs1g-wEPBUzW0a0ce-mclKvc4cdL2Pj0wZjudzjTFeUOfw'
});

const sheets = google.sheets('v4');
const apiKey = 'AIzaSyBipCKTS4-g1jvv-vpmAvyo-MunhprXqwg';
const spreadsheetId = '1P5TKoZa058hT_zECqjCLhWxovMCA4HsEtP9oYXpp_VY';
const range = '–¢–¢–•!A:V';  // –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö

// –°–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤
const synonyms = {
    "–∞–∫-103": ["–∞–∫103", "–∞–∫-103", "–∞–∫ 103"],
    "–∞–∫-47": ["–∞–∫47", "–∞–∫-47", "–∞–∫ 47"],
    "—Å–∫–æ—Ä–ø–∏–æ–Ω": ["—Å–∫orpion", "—Å–∫–æ—Ä–ø–∏–æ–Ω", "—Å–∫-orpion"],
    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å–∏–Ω–æ–Ω–∏–º—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
let suggestedWeapons = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏
function transliterate(text) {
    const translitMap = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo', '–∂': 'zh',
        '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o',
        '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', '—Ñ': 'f', '—Ö': 'kh', '—Ü': 'ts',
        '—á': 'ch', '—à': 'sh', '—â': 'shch', '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
    };
    
    return text.split('').map(char => translitMap[char] || char).join('');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏
function cleanString(str) {
    return str.toLowerCase().replace(/[^a-z–∞-—è—ë0-9]/g, '').trim();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä—É–∂–∏—è
async function getWeaponStats(weaponName) {
    if (!weaponName) {
        return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è.';
    }

    const cleanedWeaponName = cleanString(weaponName);
    const transliteratedWeaponName = transliterate(cleanedWeaponName);

    try {
        const response = await sheets.spreadsheets.values.get({
            key: apiKey,
            spreadsheetId: spreadsheetId,
            range: range,
        });

        const rows = response.data.values;
        if (!rows || rows.length === 0) {
            return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –æ—Ä—É–∂–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã.';
        }

        suggestedWeapons = []; // –°–±—Ä–æ—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

        for (let row of rows) {
            const weaponInRow = cleanString(row[0]);
            const transliteratedRowWeapon = transliterate(weaponInRow);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏–Ω–æ–Ω–∏–º—ã
            if (synonyms[weaponInRow]) {
                for (let synonym of synonyms[weaponInRow]) {
                    if (transliteratedRowWeapon.includes(transliteratedWeaponName) || weaponInRow.includes(cleanedWeaponName)) {
                        suggestedWeapons.push(row);
                    }
                }
            }   else if (transliteratedRowWeapon.includes(transliteratedWeaponName) || weaponInRow.includes(cleanedWeaponName)) {
                suggestedWeapons.push(row);
            }
        }

        if (suggestedWeapons.length === 0) {
            return '–û—Ä—É–∂–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è.';
        } else {
            let message = '–ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ä—É–∂–∏—è:\n';
            suggestedWeapons.forEach((row, index) => {
                message += `${index + 1}. –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è: ${row[0]}\n`;
            });
            return message + '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ—Ä—É–∂–∏–∏.';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –æ—Ä—É–∂–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä—É–∂–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É
async function getWeaponInfoByIndex(index) {
    console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞: ${index}`); // –û—Ç–ª–∞–¥–∫–∞
    if (index < 1 || index > suggestedWeapons.length) {
        console.log('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.'); // –û—Ç–ª–∞–¥–∫–∞
        return '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.';
    }

    const row = suggestedWeapons[index - 1]; // –ò–Ω–¥–µ–∫—Å—ã –≤ –º–∞—Å—Å–∏–≤–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
    console.log('–î–∞–Ω–Ω—ã–µ –æ—Ä—É–∂–∏—è:', row); // –û—Ç–ª–∞–¥–∫–∞

    const weaponInfo = `
==========================
üéØ–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è: ${row[0]}
==========================
–°–µ—Ä–∏—è: ${row[1]}
–¢–∏–ø –æ—Ä—É–∂–∏—è: ${row[2]}
–¢–∏–ø —É—Ä–æ–Ω–∞: ${row[3]}
–£—Ä–æ–Ω —Å—Ç–æ–∫: ${row[4]}
–£—Ä–æ–Ω —Ñ—É–ª–ª: ${row[5]}
–û–±–æ–π–º–∞ —Å—Ç–æ–∫: ${row[6]}
–û–±–æ–π–º–∞ —Ñ—É–ª–ª: ${row[7]}
–ó–∞–ø–∞—Å —Å—Ç: ${row[8]}
–ó–∞–ø–∞—Å —Ñ–ª: ${row[9]}
–¢–µ–º–ø: ${row[10]}
–î–∞–ª—å–Ω–æ—Å—Ç—å: ${row[11]}
–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: ${row[12]}
–°—Ç–æ–∏–º–æ—Å—Ç—å: ${row[13]}
–§—É–ª–ª —É—Ä–æ–Ω: ${row[16]}
–§—É–ª–ª –æ–±–æ–π–º–∞: ${row[17]}
–§—É–ª–ª –∑–∞–ø–∞—Å: ${row[18]}
–ë–∞–∑–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ: ${row[19]}
==========================
ID –ø—Ä–µ–¥–º–µ—Ç–∞(1): ${row[20]}
ID –ø—Ä–µ–¥–º–µ—Ç–∞(2): ${row[21]}
==========================`;

    const weaponImageUrl = row[14]; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —è—á–µ–π–∫–µ O (–∏–Ω–¥–µ–∫—Å 14)

    return { weaponInfo, weaponImageUrl };
}
let waitingForWeaponSelection = false; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏—è

vk.updates.on('message_new', async (context, next) => {
    const message = context.text.toLowerCase();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ "—Å—Ç–∞—Ç" –∏–ª–∏ "—Ç—Ç—Ö"
    const weaponNameMatch = message.match(/(?:—Å—Ç–∞—Ç|—Ç—Ç—Ö) (\S+)/i);
    const numberMatch = message.match(/^(\d+)$/); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–º–µ—Ä

    // –ï—Å–ª–∏ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤—ã–±–æ—Ä–∞ –æ—Ä—É–∂–∏—è
    if (waitingForWeaponSelection) {
        console.log('–û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –æ—Ä—É–∂–∏—è...'); // –û—Ç–ª–∞–¥–∫–∞
        if (numberMatch) {
            const index = parseInt(numberMatch[1], 10);
            console.log(`–í–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: ${index}`); // –û—Ç–ª–∞–¥–∫–∞
            const { weaponInfo, weaponImageUrl } = await getWeaponInfoByIndex(index);
            
            await context.send(weaponInfo);
            if (weaponImageUrl) {
                await context.send({ attachment: weaponImageUrl }); // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            }
            
            waitingForWeaponSelection = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.'); // –û—Ç–ª–∞–¥–∫–∞
        } else {
            await context.send('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä—É–∂–∏–∏.');
        }
    } else if (weaponNameMatch) {
        const stats = await getWeaponStats(weaponNameMatch[1]);
        if (stats.includes('–ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ä—É–∂–∏—è')) {
            waitingForWeaponSelection = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –æ—Ä—É–∂–∏—è
            console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.'); // –û—Ç–ª–∞–¥–∫–∞
        }
        await context.send(stats);
    } else {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        return; // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    }

    await next();
});


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
process.stdin.on('data', (data) => {
    const input = data.toString().trim();
    if (input === 'stop') {
        console.log('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã...');
        vk.updates.stop(); // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π VK
        process.exit(0);   // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    }
});

vk.updates.start().catch(console.error);